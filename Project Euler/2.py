"""
Even Fibonacci Numbers
----------------------

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Approach:

1   2<--   3   5   8<--   13  21  34<--  55  89  144<-- 233 377 610<-- 987 1597    2584<--    4181    6765

Always 2 uneven followed by an even

You can generate fib numbers using the formula: (phi^n - (-phi)^(-n))/sqrt(5) --> phi = (1+sqrt(5))/2

sum all the even fibonacci numbers below 4-million
"""
import itertools as it
def fib(n):
    """ Return the n-th fibonacci number """
    n+=1 #due to problem specifications
    phi = (1+5**.5)/2
    return int((phi**n - (-phi)**(-n))/5**.5)

result = sum(it.takewhile(
    lambda x: x<4000000,
    (fib(i) for i in range(2,4000000,3))
    ))

print("The sum of all even Fibonacci numbers less than 4000000 is {0}".format(result))